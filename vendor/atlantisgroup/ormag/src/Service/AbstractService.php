<?phpnamespace AtlantisGroup\OrmAG\Service;use AtlantisGroup\OrmAG\DataAccess\DataAccessInterface;use AtlantisGroup\OrmAG\DataMapper\DataMapperInterface;use Psr\Log\LoggerInterface;use Symfony\Component\Stopwatch\Stopwatch;use Symfony\Contracts\Translation\TranslatorInterface;/** * Class AbstractService * @package AtlantisGroup\OrmAG\Service */abstract class AbstractService implements ServiceInterface{    /**     * @var array     */    protected static array $instances = [];    /**     * @var DataAccessInterface     */    protected DataAccessInterface $dataAccess;    /**     * @var DataMapperInterface     */    protected DataMapperInterface $dataMapper;    /**     * @var TranslatorInterface     */    protected TranslatorInterface $translator;    /**     * @var Stopwatch     */    protected Stopwatch $stopwatch;    /**     * @var bool     */    protected bool $debug;    /**     * @var LoggerInterface     */    protected LoggerInterface $logger;    /**     * @var string     */    protected string $name;    /**     * @param DataAccessInterface $dataAccess     * @param DataMapperInterface $dataMapper     * @param TranslatorInterface $translator     * @param LoggerInterface|null $logger     * @param bool $debug     */    public function __construct(DataAccessInterface $dataAccess, DataMapperInterface $dataMapper, TranslatorInterface $translator, LoggerInterface $logger = null, bool $debug = false)    {        $this->dataAccess = $dataAccess;        $this->dataMapper = $dataMapper;        $this->translator = $translator;        $this->logger = $logger;        $this->debug = $debug;        $this->name = get_called_class();        $this->dataAccess->setDebug($this->debug);        $this->dataAccess->setLogger($this->logger);        $this->dataMapper->setDataAccess($this->dataAccess);        $this->dataMapper->setService($this);        self::$instances[$this->name] = $this;    }    /**     * @param string $field     * @param string|null $where     * @param array $bind     * @return mixed     */    public function sum(string $field, string $where = null, array $bind = []): mixed    {        $requestId = uniqid();        if ($this->debug === true) {            $this->logger->debug("Called $this->name ::sum {requestId}", compact('requestId', 'field', 'where', 'bind'));            $e = $this->stopwatch->start($this->name . '::sum#' . $requestId, 'OrmAG');        }        $return = $this->dataMapper->sum($field, $where, $bind);        if (isset($e) && $e->isStarted()) {            $e->stop();        }        return $return;    }    /**     * @param Stopwatch $stopwatch     * @return AbstractService     */    public function setStopwatch(Stopwatch $stopwatch): ServiceInterface    {        $this->stopwatch = $stopwatch;        return $this;    }    /**     * @param bool $debug     * @return ServiceInterface     */    public function setDebug(bool $debug): ServiceInterface    {        $this->debug = $debug;        $this->dataAccess->setDebug($debug);        return $this;    }}
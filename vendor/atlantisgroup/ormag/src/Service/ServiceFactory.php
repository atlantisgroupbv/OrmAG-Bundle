<?phpnamespace AtlantisGroup\OrmAG\Service;use AtlantisGroup\OrmAG\Exception\General;use Psr\Container\ContainerExceptionInterface;use Psr\Container\ContainerInterface;use Psr\Container\NotFoundExceptionInterface;class ServiceFactory{    /**     * @var array     */    protected static array $services = [];    /**     * @var ContainerInterface     */    protected static ContainerInterface $diContainer;    /**     * @param ContainerInterface $diContainer     */    public function __construct(ContainerInterface $diContainer)    {        self::$diContainer = $diContainer;    }    /**     * @param ContainerInterface $diContainer     * @return void     */    public static function setDiContainer(ContainerInterface $diContainer): void    {        self::$diContainer = $diContainer;    }    /**     * @param $service     * @return mixed     * @throws General     * @throws ContainerExceptionInterface     * @throws NotFoundExceptionInterface     */    public function create($service): mixed    {        if (self::$diContainer == null) {            throw new General('ServiceFactory needs a dependency injection container to build the services');        }        if (!isset(self::$services[$service])) {            self::$services[$service] = self::$diContainer->get($service);        }        return self::$services[$service];    }}
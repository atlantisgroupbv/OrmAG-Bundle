<?phpnamespace AtlantisGroup\OrmAG\DataMapper;use AtlantisGroup\OrmAG\DataAccess\DataAccessInterface;use AtlantisGroup\OrmAG\Entity\EntityFactory;use AtlantisGroup\OrmAG\Helper\Data;use AtlantisGroup\OrmAG\Service\ServiceInterface;use Exception;use Psr\Log\LoggerInterface;use Symfony\Component\Stopwatch\Stopwatch;/** * Class AbstractDataMapper * @package AtlantisGroup\OrmAG\DataMapper */abstract class AbstractDataMapper implements DataMapperInterface{    /**     * @var EntityFactory     */    protected EntityFactory $entityFactory;    /**     * @var DataAccessInterface     */    protected DataAccessInterface $dataAccess;    /**     * @var ServiceInterface     */    protected ServiceInterface $service;    /**     * @var string     */    protected string $entityClassName;    /**     * @param EntityFactory $entityFactory     */    public function __construct(EntityFactory $entityFactory)    {        $this->entityFactory = $entityFactory;    }    public function getEntityClassName(): string    {        return $this->entityClassName;    }    /**     * @param DataAccessInterface $dataAccess     * @return DataMapperInterface     */    public function setDataAccess(DataAccessInterface $dataAccess): DataMapperInterface    {        $this->dataAccess = $dataAccess;        return $this;    }    public function setService(ServiceInterface $service): DataMapperInterface    {        $this->service = $service;        return $this;    }    public function sum(string $field, string $where = null, array $bind = []): mixed    {        $value = $this->dataAccess->sum($field, $where, $bind);        return $this->convertData($field, $value);    }    /**     * @param LoggerInterface|null $logger     * @return DataMapperInterface     */    public function setLogger(LoggerInterface $logger = null): DataMapperInterface    {        trigger_error('The call to  "setLogger" is deprecated', E_USER_DEPRECATED);        return $this;    }    /**     * @param Stopwatch|null $stopwatch     * @return DataMapperInterface     */    public function setStopwatch(Stopwatch $stopwatch = null): DataMapperInterface    {        trigger_error('The call to  "setStopwatch" is deprecated', E_USER_DEPRECATED);        return $this;    }    /**     * @throws Exception     */    protected function checkSetup()    {        if (empty($this->entityClassName)) {            throw new Exception('Class \'' . get_class($this) . '\' need to have the property \'entityClassName\' set correctly.');        }    }    private function convertData($field, $value)    {        $data = [$field => $value];        Data::changeType($this->entityClassName, $data);        return "convert from sum";    }}